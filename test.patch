commit 9da7edbcf9e772462d97b64ba07e75a6c5f798b1
Author: Martin Scholl <ms@blaise.GI.NET>
Date:   Tue Dec 30 09:58:51 2008 +0100

    integrated mochiweb http process into supervision tree.

diff --git a/src/otp/nitrogen.erl b/src/otp/nitrogen.erl
index ee82c5d..e0a0291 100644
--- a/src/otp/nitrogen.erl
+++ b/src/otp/nitrogen.erl
@@ -50,8 +50,7 @@ start(PlatformHelper) ->
 %%--------------------------------------------------------------------
 start(_Type, _StartArgs) ->
     wf:init(),
-    start_http_platform(get_platform()),
-    case nitrogen_sup:start_link() of
+    case nitrogen_sup:start_link(get_platform()) of
 	{ok, Pid} -> 
 	    {ok, Pid};
 	Error ->
@@ -87,9 +86,6 @@ set_platform(Platform) when is_atom(Platform) ->
 %%====================================================================
 %% Internal functions
 %%====================================================================
-start_http_platform(dontstart_helper) ->  ok;
-start_http_platform(PlatformModule)   ->  PlatformModule:start().
-
 get_env(Name) ->
     {ok, Value} = application:get_env(Name),
     Value.
diff --git a/src/otp/nitrogen_sup.erl b/src/otp/nitrogen_sup.erl
index 167efc1..49ba883 100644
--- a/src/otp/nitrogen_sup.erl
+++ b/src/otp/nitrogen_sup.erl
@@ -10,7 +10,7 @@
 -behaviour(supervisor).
 
 %% API
--export([start_link/0]).
+-export([start_link/1]).
 
 %% Supervisor callbacks
 -export([init/1]).
@@ -24,8 +24,8 @@
 %% Function: start_link() -> {ok,Pid} | ignore | {error,Error}
 %% Description: Starts the supervisor
 %%--------------------------------------------------------------------
-start_link() ->
-    supervisor:start_link({local, ?SERVER}, ?MODULE, []).
+start_link(Platform) ->
+    supervisor:start_link({local, ?SERVER}, ?MODULE, [Platform]).
 
 %%====================================================================
 %% Supervisor callbacks
@@ -39,10 +39,25 @@ start_link() ->
 %% to find out about restart strategy, maximum restart frequency and child 
 %% specifications.
 %%--------------------------------------------------------------------
-init([]) ->
-    % TODO: add childs
-    {ok,{{one_for_all,0,1}, []}}.
+init([Platform]) ->
+    Descr = start_platform(Platform),
+    {ok,{{one_for_all,1,10}, Descr}}.
 
 %%====================================================================
 %% Internal functions
 %%====================================================================
+
+start_platform(dontstart_platform) ->
+    % special fake platform for implementing own startup procedure
+    [];
+
+start_platform(inets_helper) ->
+    inets_helper:start(),
+    [];  %% inets does its own supervision
+
+start_platform(yaws_helper) ->
+    yaws_helper:start(),
+    [];
+
+start_platform(Platform) ->
+    Platform:supervisor_descr().
diff --git a/src/platforms/mochiweb_helper.erl b/src/platforms/mochiweb_helper.erl
index f4358af..2dffd0a 100644
--- a/src/platforms/mochiweb_helper.erl
+++ b/src/platforms/mochiweb_helper.erl
@@ -3,7 +3,14 @@
 % See MIT-LICENSE for licensing information.
 
 -module (mochiweb_helper).
--export([start/0, loop/2]).
+-export([start/0, loop/2, supervisor_descr/0]).
+
+
+supervisor_descr() ->
+    [{?MODULE, 
+     {?MODULE, start, []},
+     permanent, 1000, worker, [mochiweb_socket_server]}].
+
 
 start() ->
 	% Initialize Nitrogen.
@@ -19,17 +26,16 @@ start() ->
 	],
 
 	Loop = fun (Req) -> ?MODULE:loop(Req, DocumentRoot) end,
-	
-	F = fun() -> 
-		mochiweb_http:start([{name, ?MODULE}, {loop, Loop} | Options]),
-		receive after infinity -> ok end
-	end,
-	spawn(F),
-	
-	io:format("~n~n---~n"),
-	io:format("Nitrogen is now running, using mochiweb_http:start().~n"),
-	io:format("Open your browser to: http://localhost:8000~n"),
-	io:format("---~n~n").
+	Ret = mochiweb_http:start([{name, ?MODULE}, {loop, Loop} | Options]),
+        case Ret of
+	    {ok, _Pid} ->
+		io:format("~n~n---~n"),
+		io:format("Nitrogen is now running, using mochiweb_http:start().~n"),
+		io:format("Open your browser to: http://localhost:8000~n"),
+		io:format("---~n~n");
+	    _ -> ok
+        end,
+        Ret.
 
 loop(Req, DocRoot) ->
 	"/" ++ Path = Req:get(path),

commit 6d3b9b328a482e4642f523091e1742fd4d5b9dd1
Author: Martin Scholl <ms@blaise.GI.NET>
Date:   Tue Dec 30 09:57:53 2008 +0100

    add application 'inets' to defaut release file.

diff --git a/src/otp/otp_util.erl b/src/otp/otp_util.erl
index 74059ad..768f415 100644
--- a/src/otp/otp_util.erl
+++ b/src/otp/otp_util.erl
@@ -37,7 +37,7 @@ start(inets) ->    make_otp_files(nitrogen_inets,    inets_helper,    ?APPLICATI
 start(mochiweb) -> make_otp_files(nitrogen_mochiweb, mochiweb_helper, ?APPLICATIONS ++ [crypto, mochiweb]);
 start(yaws) ->     make_otp_files(nitrogen_yaws,     yaws_helper,     ?APPLICATIONS ++ [yaws]).
 
-start() ->         make_otp_files(nitrogen,          inets_helper,    ?APPLICATIONS).
+start() ->         make_otp_files(nitrogen,          inets_helper,    ?APPLICATIONS ++ [inets]).
 
 write_sys_config() ->
     Conf = [{inets, [

commit 91c1c17175598848c07edad0beec5561b9c44f21
Author: Martin Scholl <ms@diskware.net>
Date:   Tue Dec 30 02:04:58 2008 +0100

    updated email address

diff --git a/src/otp/otp_util.erl b/src/otp/otp_util.erl
index 3a1e1d6..74059ad 100644
--- a/src/otp/otp_util.erl
+++ b/src/otp/otp_util.erl
@@ -1,5 +1,5 @@
 %%% File    : otp_util.erl
-%%% Author  : Martin Scholl <ms@littlone.ln>
+%%% Author  : Martin Scholl :: ms AT diskware.net
 %%% Description : utility module for generating OTP files
 %%%      !This module _has_ to be called from nitrogen's
 %%%       base directory!     

commit ed751fd150290bbff00af0bb9d8b2c7b1ad8ba76
Author: Martin Scholl <ms@diskware.net>
Date:   Tue Dec 30 01:41:57 2008 +0100

    OTP-ified nitrogen. Furthermore nitrogen application is now startable via nitrogen:start/{0,1}

diff --git a/.gitignore b/.gitignore
index 8062d4d..495e2ef 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,7 +2,8 @@
 .DS_Store
 http_servers
 *~
-nitrogen.rel
-nitrogen.boot
-nitrogen.script
+*.rel
+*.boot
+*.script
+*.app
 ebin/nitrogen.app
\ No newline at end of file
diff --git a/src/lib/wf_init.erl b/src/lib/wf_init.erl
index b82eec1..633b8ea 100644
--- a/src/lib/wf_init.erl
+++ b/src/lib/wf_init.erl
@@ -24,8 +24,4 @@ atomize_pages_in_path(Path) ->
 	BeamFiles = filelib:wildcard("*.beam", Path),
 	[list_to_atom(filename:rootname(X)) || X <- BeamFiles].
 
-get_config() ->	
-	{ok, [Config]} = file:consult("./nitrogen.config"),
-	Port = proplists:get_value(port, Config),
-	DocumentRoot = proplists:get_value(document_root, Config),
-	{wf:to_integer(Port), DocumentRoot}.
+get_config() ->	{nitrogen:get_port(), nitrogen:get_docroot()}.
diff --git a/src/otp/nitrogen.erl b/src/otp/nitrogen.erl
index dd869b9..ee82c5d 100644
--- a/src/otp/nitrogen.erl
+++ b/src/otp/nitrogen.erl
@@ -12,6 +12,29 @@
 %% Application callbacks
 -export([start/2, stop/1]).
 
+-export([start/0,start/1,load/0]).
+
+-export([get_docroot/0, set_docroot/1,
+	 get_port/0, set_port/1,
+	 get_platform/0, set_platform/1]).
+
+
+load() -> application:load(nitrogen).
+     
+%%
+%% start nitrogen but do not start a certain helper
+%%
+start() -> start(dontstart_helper).
+
+%%
+%% start nitrogen for a given platform
+%%
+start(PlatformHelper) ->
+    application:load(nitrogen),
+    application:set_env(nitrogen, platform, PlatformHelper),
+    application:start(nitrogen).
+
+
 %%====================================================================
 %% Application callbacks
 %%====================================================================
@@ -25,7 +48,9 @@
 %% OTP design principles as a supervision tree, this means starting the
 %% top supervisor of the tree.
 %%--------------------------------------------------------------------
-start(_Type, StartArgs) ->
+start(_Type, _StartArgs) ->
+    wf:init(),
+    start_http_platform(get_platform()),
     case nitrogen_sup:start_link() of
 	{ok, Pid} -> 
 	    {ok, Pid};
@@ -42,6 +67,29 @@ start(_Type, StartArgs) ->
 stop(_State) ->
     ok.
 
+
+get_docroot()  -> get_env(document_root).
+get_port()     -> get_env(port).
+get_platform() -> get_env(platform).
+
+
+set_docroot(Docroot) when is_list(Docroot), 
+                          length(Docroot) > 0 ->
+    application:set_env(nitrogen, document_root, Docroot).
+
+set_port(Port) when is_integer(Port), Port > 0, Port < 65536 ->
+    application:set_env(nitrogen, port, Port).
+
+set_platform(Platform) when is_atom(Platform) ->
+    application:set_env(nitrogen, platform, Platform).
+
+
 %%====================================================================
 %% Internal functions
 %%====================================================================
+start_http_platform(dontstart_helper) ->  ok;
+start_http_platform(PlatformModule)   ->  PlatformModule:start().
+
+get_env(Name) ->
+    {ok, Value} = application:get_env(Name),
+    Value.
diff --git a/src/platforms/inets_helper.erl b/src/platforms/inets_helper.erl
index b6be0fd..da92b21 100644
--- a/src/platforms/inets_helper.erl
+++ b/src/platforms/inets_helper.erl
@@ -7,7 +7,6 @@
 
 start() ->
 	% Initialize Nitrogen.
-	wf:init(),
 	{Port, DocumentRoot} = wf_init:get_config(),
 	
 	inets:start(),
diff --git a/src/platforms/mochiweb_helper.erl b/src/platforms/mochiweb_helper.erl
index 83ac25f..f4358af 100644
--- a/src/platforms/mochiweb_helper.erl
+++ b/src/platforms/mochiweb_helper.erl
@@ -7,7 +7,6 @@
 
 start() ->
 	% Initialize Nitrogen.
-	wf:init(),
 	{Port, DocumentRoot} = wf_init:get_config(),
 
 	% Start crypto...
diff --git a/src/platforms/yaws_helper.erl b/src/platforms/yaws_helper.erl
index a7a5942..fc7cbb6 100644
--- a/src/platforms/yaws_helper.erl
+++ b/src/platforms/yaws_helper.erl
@@ -7,7 +7,6 @@
 
 start() ->
 	% Initialize Nitrogen.
-	wf:init(),
 	{Port, DocumentRoot} = wf_init:get_config(),
 
 	SC = [
@@ -24,4 +23,4 @@ start() ->
 	io:format("~n~n---~n"),
 	io:format("Nitrogen is now running, using yaws:start_embedded().~n"),
 	io:format("Open your browser to: http://localhost:8000~n"),
-	io:format("---~n~n").
\ No newline at end of file
+	io:format("---~n~n").

commit 373f880f1e2418b41f733920bda7f0687bc4ce30
Author: Martin Scholl <ms@diskware.net>
Date:   Tue Dec 30 01:39:19 2008 +0100

    otp_util is now capable of writing sys.config files, generating releases "nitrogen_{yaws,mochiweb,inets}" beneath "nitrogen"

diff --git a/Makefile b/Makefile
index 4faf996..a85bfdd 100755
--- a/Makefile
+++ b/Makefile
@@ -1,10 +1,22 @@
-all: compile otpify
+all: compile nitrogen
 
 compile: 
 	erl -make
-	
+
 clean:
 	rm -rf ./ebin/*.*
-	
-otpify: compile
+
+nitrogen: compile
 	erl -pa ebin -s otp_util -s init stop -noshell
+
+# build a boot file with inets as platform
+nitrogen_inets: compile
+	erl -pa ebin -s otp_util start inets -s init stop -noshell
+
+# build a boot file with yaws as platform
+nitrogen_yaws: compile
+	erl -pa ebin -pa ../yaws/ebin -s otp_util start yaws -s init stop -noshell
+
+# build a boot file with mochiweb as platform
+nitrogen_mochiweb: compile
+	erl -pa ebin -pa ../mochiweb/ebin -s otp_util start mochiweb -s init stop -noshell
\ No newline at end of file
diff --git a/src/otp/otp_util.erl b/src/otp/otp_util.erl
index 8634936..3a1e1d6 100644
--- a/src/otp/otp_util.erl
+++ b/src/otp/otp_util.erl
@@ -18,6 +18,7 @@
 -define(NITROGEN_VSN, "0.9"). %version number of nitrogen
 -define(NITROGEN_DESCR, "Nitrogen Web Framework").
 -define(NITROGEN_ID, "Nitrogen").
+-define(NITROGEN_APPMOD, nitrogen).
 
 -define(REL_FILE, "nitrogen.rel").
 
@@ -31,22 +32,38 @@
 
 
 
-start() ->
-    make_otp_files(nitrogen, inets_helper).
+start([Arg]) ->    start(Arg);
+start(inets) ->    make_otp_files(nitrogen_inets,    inets_helper,    ?APPLICATIONS ++ [inets]);
+start(mochiweb) -> make_otp_files(nitrogen_mochiweb, mochiweb_helper, ?APPLICATIONS ++ [crypto, mochiweb]);
+start(yaws) ->     make_otp_files(nitrogen_yaws,     yaws_helper,     ?APPLICATIONS ++ [yaws]).
 
+start() ->         make_otp_files(nitrogen,          inets_helper,    ?APPLICATIONS).
 
-make_otp_files(Appname, Platform) when is_atom(Appname) ->
+write_sys_config() ->
+    Conf = [{inets, [
+		     {server_root, "."},
+		     {bind_address, "localhost"},
+		     {server_name, "localhost"},
+		     {modules, [wf_inets, mod_head, mod_get]},
+		     {mime_types, [{"css", "text/css"}, {"js", "text/javascript"}, 
+				   {"html", "text/html"}]} |
+		     ?NITROGEN_DEF_ENV
+		    ]}],
+    serialize("sys.config", Conf).
+ 
+
+make_otp_files(Appname, Platform, ApplicationList) when is_atom(Appname) ->
     AppnameStr = atom_to_list(Appname),
     AppFile = ?EBIN_DEST ++ AppnameStr ++ ".app",
-    write_relfile(Appname),
+    write_relfile(Appname, ApplicationList),
     write_appfile(AppFile, Appname,
 		  ?MODULE_BLACKLIST,
-		  Platform),
+		  Platform, ApplicationList),
     make_script(Appname).
 
 
 %% writes the .app file`
-write_appfile(Filename, Appname, Blacklist, Platform) ->
+write_appfile(Filename, Appname, Blacklist, Platform, Applications) ->
     ?LOG("Writing .app-file ~s\n", [Filename]),
     Env = [{platform, Platform} | ?NITROGEN_DEF_ENV],
     Modlist = build_module_list(?EBIN_DEST, Blacklist),
@@ -57,8 +74,8 @@ write_appfile(Filename, Appname, Blacklist, Platform) ->
 	    {vsn, ?NITROGEN_VSN},
 	    {modules, Modlist},
 	    {registered, ?NITROGEN_REGS},
-	    {applications, ?APPLICATIONS},
-	    {mod, {Appname, []}},
+	    {applications, Applications},
+	    {mod, {?NITROGEN_APPMOD, []}},
 	    {start_phases, []},
 	    {env, Env}
 	   ]
@@ -66,10 +83,10 @@ write_appfile(Filename, Appname, Blacklist, Platform) ->
     serialize(Filename, App).
 
 %% writes the .rel file
-write_relfile(Appname) when is_atom(Appname) ->
+write_relfile(Appname, ApplicationList) when is_atom(Appname) ->
     Filename = atom_to_list(Appname) ++ ".rel",
     ?LOG("Writing .rel-file ~s\n", [Filename]), 
-    Applist = rel_applist(?APPLICATIONS),
+    Applist = rel_applist(ApplicationList),
     Rel = {release, 
 	   {atom_to_list(Appname), ?NITROGEN_VSN},
 	   { erts, erlang:system_info(version) },

commit e9371071c2c9b783f85fd9e43c3bcc4077361064
Author: Martin Scholl <ms@diskware.net>
Date:   Tue Dec 30 00:05:52 2008 +0100

    changed otp_util to also serialize application's default environment

diff --git a/src/otp/otp_util.erl b/src/otp/otp_util.erl
index 05e3fb1..8634936 100644
--- a/src/otp/otp_util.erl
+++ b/src/otp/otp_util.erl
@@ -8,30 +8,47 @@
 -module(otp_util).
 -compile([export_all]).
 
+
+%% registered process names
+-define(NITROGEN_REGS, 
+	[wf_activestate_sup,nitrogen_sup]).
+%% default application environment
+-define(NITROGEN_DEF_ENV, [{document_root, "./wwwroot"}, 
+			   {port, 8000}]). 
 -define(NITROGEN_VSN, "0.9"). %version number of nitrogen
 -define(NITROGEN_DESCR, "Nitrogen Web Framework").
 -define(NITROGEN_ID, "Nitrogen").
--define(NITROGEN_APP, nitrogen).
--define(NITROGEN_REGS, [wf_activestate_sup,nitrogen_sup]).
 
+-define(REL_FILE, "nitrogen.rel").
+
+%%list of required applications 
+-define(APPLICATIONS, [kernel, stdlib, sasl]). 
+%%list of module names not to put into nitrogen app
+-define(MODULE_BLACKLIST, ["otp_util"]). 
+-define(EBIN_DEST, "ebin/"). 
 
--define(APPLICATIONS, [kernel, stdlib, sasl]). %list of applications to include in *.rel file
--define(MODULE_BLACKLIST, ["otp_util"]). %list of module names not to put into nitrogen app
--define(EBIN_DEST, "ebin/"). %name of the main ebin directory
 -define(LOG(Fmt, Args), io:format("[OTP-ify] " ++ Fmt, Args)).
 
--define(REL_FILE, "nitrogen.rel").
--define(APP_FILE, ?EBIN_DEST ++ "nitrogen.app").
+
 
 start() ->
-    write_relfile(?NITROGEN_APP),
-    write_appfile(?APP_FILE, ?NITROGEN_APP, ?MODULE_BLACKLIST),
-    make_script(?NITROGEN_APP).
-    
+    make_otp_files(nitrogen, inets_helper).
+
+
+make_otp_files(Appname, Platform) when is_atom(Appname) ->
+    AppnameStr = atom_to_list(Appname),
+    AppFile = ?EBIN_DEST ++ AppnameStr ++ ".app",
+    write_relfile(Appname),
+    write_appfile(AppFile, Appname,
+		  ?MODULE_BLACKLIST,
+		  Platform),
+    make_script(Appname).
+
 
 %% writes the .app file`
-write_appfile(Filename, Appname, Blacklist) ->
+write_appfile(Filename, Appname, Blacklist, Platform) ->
     ?LOG("Writing .app-file ~s\n", [Filename]),
+    Env = [{platform, Platform} | ?NITROGEN_DEF_ENV],
     Modlist = build_module_list(?EBIN_DEST, Blacklist),
     App = {application, Appname,
 	   [
@@ -43,7 +60,7 @@ write_appfile(Filename, Appname, Blacklist) ->
 	    {applications, ?APPLICATIONS},
 	    {mod, {Appname, []}},
 	    {start_phases, []},
-	    {env, []}
+	    {env, Env}
 	   ]
 	  },
     serialize(Filename, App).

commit 7cdc0989f96410b49ec58c39f2e879fdb0de7998
Author: Martin Scholl <ms@diskware.net>
Date:   Mon Dec 29 23:02:28 2008 +0100

    initial otp-ification of nitrogen.

diff --git a/.gitignore b/.gitignore
index 0c2abc2..8062d4d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,4 +1,8 @@
 *.dump
 .DS_Store
 http_servers
-*~
\ No newline at end of file
+*~
+nitrogen.rel
+nitrogen.boot
+nitrogen.script
+ebin/nitrogen.app
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 7b13eee..4faf996 100755
--- a/Makefile
+++ b/Makefile
@@ -1,5 +1,10 @@
+all: compile otpify
+
 compile: 
 	erl -make
 	
 clean:
 	rm -rf ./ebin/*.*
+	
+otpify: compile
+	erl -pa ebin -s otp_util -s init stop -noshell
diff --git a/src/otp/nitrogen.erl b/src/otp/nitrogen.erl
new file mode 100644
index 0000000..dd869b9
--- /dev/null
+++ b/src/otp/nitrogen.erl
@@ -0,0 +1,47 @@
+%%%-------------------------------------------------------------------
+%%% File    : nitrogen.erl
+%%% Author  : Martin Scholl :: ms AT diskware DOT net
+%%% Description : 
+%%%
+%%% Created : 29 Dec 2008 by Martin Scholl
+%%%-------------------------------------------------------------------
+-module(nitrogen).
+
+-behaviour(application).
+
+%% Application callbacks
+-export([start/2, stop/1]).
+
+%%====================================================================
+%% Application callbacks
+%%====================================================================
+%%--------------------------------------------------------------------
+%% Function: start(Type, StartArgs) -> {ok, Pid} |
+%%                                     {ok, Pid, State} |
+%%                                     {error, Reason}
+%% Description: This function is called whenever an application 
+%% is started using application:start/1,2, and should start the processes
+%% of the application. If the application is structured according to the
+%% OTP design principles as a supervision tree, this means starting the
+%% top supervisor of the tree.
+%%--------------------------------------------------------------------
+start(_Type, StartArgs) ->
+    case nitrogen_sup:start_link() of
+	{ok, Pid} -> 
+	    {ok, Pid};
+	Error ->
+	    Error
+    end.
+
+%%--------------------------------------------------------------------
+%% Function: stop(State) -> void()
+%% Description: This function is called whenever an application
+%% has stopped. It is intended to be the opposite of Module:start/2 and
+%% should do any necessary cleaning up. The return value is ignored. 
+%%--------------------------------------------------------------------
+stop(_State) ->
+    ok.
+
+%%====================================================================
+%% Internal functions
+%%====================================================================
diff --git a/src/otp/nitrogen_sup.erl b/src/otp/nitrogen_sup.erl
new file mode 100644
index 0000000..167efc1
--- /dev/null
+++ b/src/otp/nitrogen_sup.erl
@@ -0,0 +1,48 @@
+%%%-------------------------------------------------------------------
+%%% File    : nitrogen_sup.erl
+%%% Author  : Martin Scholl :: ms AT diskware DOT net
+%%% Description : Nitrogen's main supervisor
+%%%
+%%% Created : 29 Dec 2008 by Martin Scholl
+%%%-------------------------------------------------------------------
+-module(nitrogen_sup).
+
+-behaviour(supervisor).
+
+%% API
+-export([start_link/0]).
+
+%% Supervisor callbacks
+-export([init/1]).
+
+-define(SERVER, ?MODULE).
+
+%%====================================================================
+%% API functions
+%%====================================================================
+%%--------------------------------------------------------------------
+%% Function: start_link() -> {ok,Pid} | ignore | {error,Error}
+%% Description: Starts the supervisor
+%%--------------------------------------------------------------------
+start_link() ->
+    supervisor:start_link({local, ?SERVER}, ?MODULE, []).
+
+%%====================================================================
+%% Supervisor callbacks
+%%====================================================================
+%%--------------------------------------------------------------------
+%% Func: init(Args) -> {ok,  {SupFlags,  [ChildSpec]}} |
+%%                     ignore                          |
+%%                     {error, Reason}
+%% Description: Whenever a supervisor is started using 
+%% supervisor:start_link/[2,3], this function is called by the new process 
+%% to find out about restart strategy, maximum restart frequency and child 
+%% specifications.
+%%--------------------------------------------------------------------
+init([]) ->
+    % TODO: add childs
+    {ok,{{one_for_all,0,1}, []}}.
+
+%%====================================================================
+%% Internal functions
+%%====================================================================
diff --git a/src/otp/otp_util.erl b/src/otp/otp_util.erl
new file mode 100644
index 0000000..05e3fb1
--- /dev/null
+++ b/src/otp/otp_util.erl
@@ -0,0 +1,95 @@
+%%% File    : otp_util.erl
+%%% Author  : Martin Scholl <ms@littlone.ln>
+%%% Description : utility module for generating OTP files
+%%%      !This module _has_ to be called from nitrogen's
+%%%       base directory!     
+%%% Created : 29 Dec 2008 by Martin Scholl :: ms AT diskware DOT net
+
+-module(otp_util).
+-compile([export_all]).
+
+-define(NITROGEN_VSN, "0.9"). %version number of nitrogen
+-define(NITROGEN_DESCR, "Nitrogen Web Framework").
+-define(NITROGEN_ID, "Nitrogen").
+-define(NITROGEN_APP, nitrogen).
+-define(NITROGEN_REGS, [wf_activestate_sup,nitrogen_sup]).
+
+
+-define(APPLICATIONS, [kernel, stdlib, sasl]). %list of applications to include in *.rel file
+-define(MODULE_BLACKLIST, ["otp_util"]). %list of module names not to put into nitrogen app
+-define(EBIN_DEST, "ebin/"). %name of the main ebin directory
+-define(LOG(Fmt, Args), io:format("[OTP-ify] " ++ Fmt, Args)).
+
+-define(REL_FILE, "nitrogen.rel").
+-define(APP_FILE, ?EBIN_DEST ++ "nitrogen.app").
+
+start() ->
+    write_relfile(?NITROGEN_APP),
+    write_appfile(?APP_FILE, ?NITROGEN_APP, ?MODULE_BLACKLIST),
+    make_script(?NITROGEN_APP).
+    
+
+%% writes the .app file`
+write_appfile(Filename, Appname, Blacklist) ->
+    ?LOG("Writing .app-file ~s\n", [Filename]),
+    Modlist = build_module_list(?EBIN_DEST, Blacklist),
+    App = {application, Appname,
+	   [
+	    {description, ?NITROGEN_DESCR},
+	    {id, ?NITROGEN_ID},
+	    {vsn, ?NITROGEN_VSN},
+	    {modules, Modlist},
+	    {registered, ?NITROGEN_REGS},
+	    {applications, ?APPLICATIONS},
+	    {mod, {Appname, []}},
+	    {start_phases, []},
+	    {env, []}
+	   ]
+	  },
+    serialize(Filename, App).
+
+%% writes the .rel file
+write_relfile(Appname) when is_atom(Appname) ->
+    Filename = atom_to_list(Appname) ++ ".rel",
+    ?LOG("Writing .rel-file ~s\n", [Filename]), 
+    Applist = rel_applist(?APPLICATIONS),
+    Rel = {release, 
+	   {atom_to_list(Appname), ?NITROGEN_VSN},
+	   { erts, erlang:system_info(version) },
+	   Applist ++ [{Appname, ?NITROGEN_VSN}]},
+    serialize(Filename, Rel).
+
+%% returns *.rel-compatible list of applications
+rel_applist(Apps) ->
+    F1 = fun(Appname) ->
+		case application:load(Appname) of
+		    ok -> ok;
+		    {error, {already_loaded, _}} -> ok
+		end
+	end,
+    lists:foreach(F1, Apps),
+    LoadedApps = application:loaded_applications(),
+    F2 = fun(Appname) ->
+		 {value, {Appname, _, Vsn}} = lists:keysearch(Appname, 1, LoadedApps),
+		 {Appname, Vsn}
+	 end,
+    lists:map(F2, Apps).
+
+build_module_list(Sourcedir, Blacklist) ->
+    Mods = filelib:wildcard(Sourcedir ++ "*.beam"),
+    SourcedirLen = length(Sourcedir),
+    PathFilter = fun(Module) -> 
+			 %% remove trailing ".beam" and prefix Sourcedir
+			 Name = lists:sublist(Module, SourcedirLen+1, 			      
+					      length(Module)-SourcedirLen-5),
+			 list_to_atom(Name)			 
+		 end,
+    Filter = fun(Module) -> not lists:member(Module, Blacklist) end,
+    lists:filter(Filter, lists:map(PathFilter, Mods)).
+
+serialize(Filename, Tuple) ->			 
+    ok = file:write_file(Filename, io_lib:format("~p.~n", [Tuple])).
+
+make_script(Name) ->
+    Opts = [no_module_tests],
+    ok = systools:make_script(atom_to_list(Name), Opts).

commit d48060a7f9dee91c18a97263a286599cefd4981c
Author: Martin Scholl <ms@diskware.net>
Date:   Mon Dec 29 20:28:30 2008 +0100

    [GIT] ignore emacs' temporary files

diff --git a/.gitignore b/.gitignore
index 51908b3..0c2abc2 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,4 @@
 *.dump
 .DS_Store
-http_servers
\ No newline at end of file
+http_servers
+*~
\ No newline at end of file
